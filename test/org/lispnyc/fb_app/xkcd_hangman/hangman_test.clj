(ns org.lispnyc.fb-app.xkcd-hangman.hangman-test
  (:use clojure.test
        org.lispnyc.fb-app.xkcd-hangman.game))

(deftest test-game-over
  (is (false? (word-complete? "foo" "f")))
  (is (false? (word-complete? "foo" "o")))
  (is (true?  (word-complete? "foo" "fo")))
  (is (true?  (word-complete? "foo" "of")))
  (is (false? (word-complete? "FOO" "f"))) 
  (is (false? (word-complete? "FoO" "o"))) 
  (is (true?  (word-complete? "FoO" "fo")))
  (is (true?  (word-complete? "FoO" "of")))
  (is (false? (word-complete? "foo" "F")))
  (is (false? (word-complete? "FoO" "O")))
  (is (true?  (word-complete? "foO" "Fo")))
  (is (true?  (word-complete? "foO" "OF")))
  (is (true?  (word-complete? "foO" "OFABC ")))
  )

(deftest test-visualize
  (is (= "___" (visualize "foo" "z")))
  (is (= "F__" (visualize "foo" "f")))
  (is (= "_OO" (visualize "foo" "o")))
  (is (= "FOO" (visualize "foo" "fo"))) 
  (is (= "FOO" (visualize "foo" "of")))    
  (is (= "F__" (visualize "FOO" "f")))     
  (is (= "_OO" (visualize "FoO" "o")))     
  (is (= "FOO" (visualize "FoO" "fo")))    
  (is (= "FOO" (visualize "FoO" "of")))    
  (is (= "F__" (visualize "foo" "F")))     
  (is (= "_OO" (visualize "FoO" "O")))     
  (is (= "FOO" (visualize "foO" "Fo")))    
  (is (= "FOO" (visualize "foO" "OF")))    
  (is (= "FOO" (visualize "foO" "OFABC "))))

(deftest test-incorrect
  (is (= 1 (count-incorrect "foo" "z")))
  (is (= 0 (count-incorrect "foo" "f")))
  (is (= 0 (count-incorrect "foo" "o")))
  (is (= 0 (count-incorrect "foo" "fo"))) 
  (is (= 0 (count-incorrect "foo" "of")))    
  (is (= 0 (count-incorrect "FOO" "f")))     
  (is (= 0 (count-incorrect "FoO" "o")))     
  (is (= 0 (count-incorrect "FoO" "fo")))    
  (is (= 0 (count-incorrect "FoO" "of")))    
  (is (= 0 (count-incorrect "foo" "F")))     
  (is (= 0 (count-incorrect "FoO" "O")))     
  (is (= 0 (count-incorrect "foO" "Fo")))    
  (is (= 0 (count-incorrect "foO" "OF")))    
  (is (= 3 (count-incorrect "foO" "OFABC")))
  (is (= 3 (count-incorrect "foO" "OFABC ")))
  )
